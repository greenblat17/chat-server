// Code generated by http://github.com/gojuno/minimock (v3.4.1). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/greenblat17/chat-server/internal/repository.AuditRepository -o audit_repository_minimock.go -n AuditRepositoryMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/greenblat17/chat-server/internal/model"
)

// AuditRepositoryMock implements mm_repository.AuditRepository
type AuditRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcSave          func(ctx context.Context, audit *model.Audit) (err error)
	funcSaveOrigin    string
	inspectFuncSave   func(ctx context.Context, audit *model.Audit)
	afterSaveCounter  uint64
	beforeSaveCounter uint64
	SaveMock          mAuditRepositoryMockSave
}

// NewAuditRepositoryMock returns a mock for mm_repository.AuditRepository
func NewAuditRepositoryMock(t minimock.Tester) *AuditRepositoryMock {
	m := &AuditRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.SaveMock = mAuditRepositoryMockSave{mock: m}
	m.SaveMock.callArgs = []*AuditRepositoryMockSaveParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mAuditRepositoryMockSave struct {
	optional           bool
	mock               *AuditRepositoryMock
	defaultExpectation *AuditRepositoryMockSaveExpectation
	expectations       []*AuditRepositoryMockSaveExpectation

	callArgs []*AuditRepositoryMockSaveParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AuditRepositoryMockSaveExpectation specifies expectation struct of the AuditRepository.Save
type AuditRepositoryMockSaveExpectation struct {
	mock               *AuditRepositoryMock
	params             *AuditRepositoryMockSaveParams
	paramPtrs          *AuditRepositoryMockSaveParamPtrs
	expectationOrigins AuditRepositoryMockSaveExpectationOrigins
	results            *AuditRepositoryMockSaveResults
	returnOrigin       string
	Counter            uint64
}

// AuditRepositoryMockSaveParams contains parameters of the AuditRepository.Save
type AuditRepositoryMockSaveParams struct {
	ctx   context.Context
	audit *model.Audit
}

// AuditRepositoryMockSaveParamPtrs contains pointers to parameters of the AuditRepository.Save
type AuditRepositoryMockSaveParamPtrs struct {
	ctx   *context.Context
	audit **model.Audit
}

// AuditRepositoryMockSaveResults contains results of the AuditRepository.Save
type AuditRepositoryMockSaveResults struct {
	err error
}

// AuditRepositoryMockSaveOrigins contains origins of expectations of the AuditRepository.Save
type AuditRepositoryMockSaveExpectationOrigins struct {
	origin      string
	originCtx   string
	originAudit string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSave *mAuditRepositoryMockSave) Optional() *mAuditRepositoryMockSave {
	mmSave.optional = true
	return mmSave
}

// Expect sets up expected params for AuditRepository.Save
func (mmSave *mAuditRepositoryMockSave) Expect(ctx context.Context, audit *model.Audit) *mAuditRepositoryMockSave {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("AuditRepositoryMock.Save mock is already set by Set")
	}

	if mmSave.defaultExpectation == nil {
		mmSave.defaultExpectation = &AuditRepositoryMockSaveExpectation{}
	}

	if mmSave.defaultExpectation.paramPtrs != nil {
		mmSave.mock.t.Fatalf("AuditRepositoryMock.Save mock is already set by ExpectParams functions")
	}

	mmSave.defaultExpectation.params = &AuditRepositoryMockSaveParams{ctx, audit}
	mmSave.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmSave.expectations {
		if minimock.Equal(e.params, mmSave.defaultExpectation.params) {
			mmSave.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSave.defaultExpectation.params)
		}
	}

	return mmSave
}

// ExpectCtxParam1 sets up expected param ctx for AuditRepository.Save
func (mmSave *mAuditRepositoryMockSave) ExpectCtxParam1(ctx context.Context) *mAuditRepositoryMockSave {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("AuditRepositoryMock.Save mock is already set by Set")
	}

	if mmSave.defaultExpectation == nil {
		mmSave.defaultExpectation = &AuditRepositoryMockSaveExpectation{}
	}

	if mmSave.defaultExpectation.params != nil {
		mmSave.mock.t.Fatalf("AuditRepositoryMock.Save mock is already set by Expect")
	}

	if mmSave.defaultExpectation.paramPtrs == nil {
		mmSave.defaultExpectation.paramPtrs = &AuditRepositoryMockSaveParamPtrs{}
	}
	mmSave.defaultExpectation.paramPtrs.ctx = &ctx
	mmSave.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmSave
}

// ExpectAuditParam2 sets up expected param audit for AuditRepository.Save
func (mmSave *mAuditRepositoryMockSave) ExpectAuditParam2(audit *model.Audit) *mAuditRepositoryMockSave {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("AuditRepositoryMock.Save mock is already set by Set")
	}

	if mmSave.defaultExpectation == nil {
		mmSave.defaultExpectation = &AuditRepositoryMockSaveExpectation{}
	}

	if mmSave.defaultExpectation.params != nil {
		mmSave.mock.t.Fatalf("AuditRepositoryMock.Save mock is already set by Expect")
	}

	if mmSave.defaultExpectation.paramPtrs == nil {
		mmSave.defaultExpectation.paramPtrs = &AuditRepositoryMockSaveParamPtrs{}
	}
	mmSave.defaultExpectation.paramPtrs.audit = &audit
	mmSave.defaultExpectation.expectationOrigins.originAudit = minimock.CallerInfo(1)

	return mmSave
}

// Inspect accepts an inspector function that has same arguments as the AuditRepository.Save
func (mmSave *mAuditRepositoryMockSave) Inspect(f func(ctx context.Context, audit *model.Audit)) *mAuditRepositoryMockSave {
	if mmSave.mock.inspectFuncSave != nil {
		mmSave.mock.t.Fatalf("Inspect function is already set for AuditRepositoryMock.Save")
	}

	mmSave.mock.inspectFuncSave = f

	return mmSave
}

// Return sets up results that will be returned by AuditRepository.Save
func (mmSave *mAuditRepositoryMockSave) Return(err error) *AuditRepositoryMock {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("AuditRepositoryMock.Save mock is already set by Set")
	}

	if mmSave.defaultExpectation == nil {
		mmSave.defaultExpectation = &AuditRepositoryMockSaveExpectation{mock: mmSave.mock}
	}
	mmSave.defaultExpectation.results = &AuditRepositoryMockSaveResults{err}
	mmSave.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmSave.mock
}

// Set uses given function f to mock the AuditRepository.Save method
func (mmSave *mAuditRepositoryMockSave) Set(f func(ctx context.Context, audit *model.Audit) (err error)) *AuditRepositoryMock {
	if mmSave.defaultExpectation != nil {
		mmSave.mock.t.Fatalf("Default expectation is already set for the AuditRepository.Save method")
	}

	if len(mmSave.expectations) > 0 {
		mmSave.mock.t.Fatalf("Some expectations are already set for the AuditRepository.Save method")
	}

	mmSave.mock.funcSave = f
	mmSave.mock.funcSaveOrigin = minimock.CallerInfo(1)
	return mmSave.mock
}

// When sets expectation for the AuditRepository.Save which will trigger the result defined by the following
// Then helper
func (mmSave *mAuditRepositoryMockSave) When(ctx context.Context, audit *model.Audit) *AuditRepositoryMockSaveExpectation {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("AuditRepositoryMock.Save mock is already set by Set")
	}

	expectation := &AuditRepositoryMockSaveExpectation{
		mock:               mmSave.mock,
		params:             &AuditRepositoryMockSaveParams{ctx, audit},
		expectationOrigins: AuditRepositoryMockSaveExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmSave.expectations = append(mmSave.expectations, expectation)
	return expectation
}

// Then sets up AuditRepository.Save return parameters for the expectation previously defined by the When method
func (e *AuditRepositoryMockSaveExpectation) Then(err error) *AuditRepositoryMock {
	e.results = &AuditRepositoryMockSaveResults{err}
	return e.mock
}

// Times sets number of times AuditRepository.Save should be invoked
func (mmSave *mAuditRepositoryMockSave) Times(n uint64) *mAuditRepositoryMockSave {
	if n == 0 {
		mmSave.mock.t.Fatalf("Times of AuditRepositoryMock.Save mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSave.expectedInvocations, n)
	mmSave.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmSave
}

func (mmSave *mAuditRepositoryMockSave) invocationsDone() bool {
	if len(mmSave.expectations) == 0 && mmSave.defaultExpectation == nil && mmSave.mock.funcSave == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSave.mock.afterSaveCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSave.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Save implements mm_repository.AuditRepository
func (mmSave *AuditRepositoryMock) Save(ctx context.Context, audit *model.Audit) (err error) {
	mm_atomic.AddUint64(&mmSave.beforeSaveCounter, 1)
	defer mm_atomic.AddUint64(&mmSave.afterSaveCounter, 1)

	mmSave.t.Helper()

	if mmSave.inspectFuncSave != nil {
		mmSave.inspectFuncSave(ctx, audit)
	}

	mm_params := AuditRepositoryMockSaveParams{ctx, audit}

	// Record call args
	mmSave.SaveMock.mutex.Lock()
	mmSave.SaveMock.callArgs = append(mmSave.SaveMock.callArgs, &mm_params)
	mmSave.SaveMock.mutex.Unlock()

	for _, e := range mmSave.SaveMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSave.SaveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSave.SaveMock.defaultExpectation.Counter, 1)
		mm_want := mmSave.SaveMock.defaultExpectation.params
		mm_want_ptrs := mmSave.SaveMock.defaultExpectation.paramPtrs

		mm_got := AuditRepositoryMockSaveParams{ctx, audit}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmSave.t.Errorf("AuditRepositoryMock.Save got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSave.SaveMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.audit != nil && !minimock.Equal(*mm_want_ptrs.audit, mm_got.audit) {
				mmSave.t.Errorf("AuditRepositoryMock.Save got unexpected parameter audit, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSave.SaveMock.defaultExpectation.expectationOrigins.originAudit, *mm_want_ptrs.audit, mm_got.audit, minimock.Diff(*mm_want_ptrs.audit, mm_got.audit))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSave.t.Errorf("AuditRepositoryMock.Save got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmSave.SaveMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSave.SaveMock.defaultExpectation.results
		if mm_results == nil {
			mmSave.t.Fatal("No results are set for the AuditRepositoryMock.Save")
		}
		return (*mm_results).err
	}
	if mmSave.funcSave != nil {
		return mmSave.funcSave(ctx, audit)
	}
	mmSave.t.Fatalf("Unexpected call to AuditRepositoryMock.Save. %v %v", ctx, audit)
	return
}

// SaveAfterCounter returns a count of finished AuditRepositoryMock.Save invocations
func (mmSave *AuditRepositoryMock) SaveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSave.afterSaveCounter)
}

// SaveBeforeCounter returns a count of AuditRepositoryMock.Save invocations
func (mmSave *AuditRepositoryMock) SaveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSave.beforeSaveCounter)
}

// Calls returns a list of arguments used in each call to AuditRepositoryMock.Save.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSave *mAuditRepositoryMockSave) Calls() []*AuditRepositoryMockSaveParams {
	mmSave.mutex.RLock()

	argCopy := make([]*AuditRepositoryMockSaveParams, len(mmSave.callArgs))
	copy(argCopy, mmSave.callArgs)

	mmSave.mutex.RUnlock()

	return argCopy
}

// MinimockSaveDone returns true if the count of the Save invocations corresponds
// the number of defined expectations
func (m *AuditRepositoryMock) MinimockSaveDone() bool {
	if m.SaveMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SaveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SaveMock.invocationsDone()
}

// MinimockSaveInspect logs each unmet expectation
func (m *AuditRepositoryMock) MinimockSaveInspect() {
	for _, e := range m.SaveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AuditRepositoryMock.Save at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterSaveCounter := mm_atomic.LoadUint64(&m.afterSaveCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SaveMock.defaultExpectation != nil && afterSaveCounter < 1 {
		if m.SaveMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AuditRepositoryMock.Save at\n%s", m.SaveMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AuditRepositoryMock.Save at\n%s with params: %#v", m.SaveMock.defaultExpectation.expectationOrigins.origin, *m.SaveMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSave != nil && afterSaveCounter < 1 {
		m.t.Errorf("Expected call to AuditRepositoryMock.Save at\n%s", m.funcSaveOrigin)
	}

	if !m.SaveMock.invocationsDone() && afterSaveCounter > 0 {
		m.t.Errorf("Expected %d calls to AuditRepositoryMock.Save at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.SaveMock.expectedInvocations), m.SaveMock.expectedInvocationsOrigin, afterSaveCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *AuditRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockSaveInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *AuditRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *AuditRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockSaveDone()
}
