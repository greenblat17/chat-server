// Code generated by http://github.com/gojuno/minimock (v3.4.1). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/greenblat17/chat-server/internal/repository.UserRepository -o user_repository_minimock.go -n UserRepositoryMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// UserRepositoryMock implements mm_repository.UserRepository
type UserRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcDeleteByChatID          func(ctx context.Context, chatID int64) (err error)
	funcDeleteByChatIDOrigin    string
	inspectFuncDeleteByChatID   func(ctx context.Context, chatID int64)
	afterDeleteByChatIDCounter  uint64
	beforeDeleteByChatIDCounter uint64
	DeleteByChatIDMock          mUserRepositoryMockDeleteByChatID

	funcSaveByChatID          func(ctx context.Context, chatID int64, usernames []string) (err error)
	funcSaveByChatIDOrigin    string
	inspectFuncSaveByChatID   func(ctx context.Context, chatID int64, usernames []string)
	afterSaveByChatIDCounter  uint64
	beforeSaveByChatIDCounter uint64
	SaveByChatIDMock          mUserRepositoryMockSaveByChatID
}

// NewUserRepositoryMock returns a mock for mm_repository.UserRepository
func NewUserRepositoryMock(t minimock.Tester) *UserRepositoryMock {
	m := &UserRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.DeleteByChatIDMock = mUserRepositoryMockDeleteByChatID{mock: m}
	m.DeleteByChatIDMock.callArgs = []*UserRepositoryMockDeleteByChatIDParams{}

	m.SaveByChatIDMock = mUserRepositoryMockSaveByChatID{mock: m}
	m.SaveByChatIDMock.callArgs = []*UserRepositoryMockSaveByChatIDParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mUserRepositoryMockDeleteByChatID struct {
	optional           bool
	mock               *UserRepositoryMock
	defaultExpectation *UserRepositoryMockDeleteByChatIDExpectation
	expectations       []*UserRepositoryMockDeleteByChatIDExpectation

	callArgs []*UserRepositoryMockDeleteByChatIDParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// UserRepositoryMockDeleteByChatIDExpectation specifies expectation struct of the UserRepository.DeleteByChatID
type UserRepositoryMockDeleteByChatIDExpectation struct {
	mock               *UserRepositoryMock
	params             *UserRepositoryMockDeleteByChatIDParams
	paramPtrs          *UserRepositoryMockDeleteByChatIDParamPtrs
	expectationOrigins UserRepositoryMockDeleteByChatIDExpectationOrigins
	results            *UserRepositoryMockDeleteByChatIDResults
	returnOrigin       string
	Counter            uint64
}

// UserRepositoryMockDeleteByChatIDParams contains parameters of the UserRepository.DeleteByChatID
type UserRepositoryMockDeleteByChatIDParams struct {
	ctx    context.Context
	chatID int64
}

// UserRepositoryMockDeleteByChatIDParamPtrs contains pointers to parameters of the UserRepository.DeleteByChatID
type UserRepositoryMockDeleteByChatIDParamPtrs struct {
	ctx    *context.Context
	chatID *int64
}

// UserRepositoryMockDeleteByChatIDResults contains results of the UserRepository.DeleteByChatID
type UserRepositoryMockDeleteByChatIDResults struct {
	err error
}

// UserRepositoryMockDeleteByChatIDOrigins contains origins of expectations of the UserRepository.DeleteByChatID
type UserRepositoryMockDeleteByChatIDExpectationOrigins struct {
	origin       string
	originCtx    string
	originChatID string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDeleteByChatID *mUserRepositoryMockDeleteByChatID) Optional() *mUserRepositoryMockDeleteByChatID {
	mmDeleteByChatID.optional = true
	return mmDeleteByChatID
}

// Expect sets up expected params for UserRepository.DeleteByChatID
func (mmDeleteByChatID *mUserRepositoryMockDeleteByChatID) Expect(ctx context.Context, chatID int64) *mUserRepositoryMockDeleteByChatID {
	if mmDeleteByChatID.mock.funcDeleteByChatID != nil {
		mmDeleteByChatID.mock.t.Fatalf("UserRepositoryMock.DeleteByChatID mock is already set by Set")
	}

	if mmDeleteByChatID.defaultExpectation == nil {
		mmDeleteByChatID.defaultExpectation = &UserRepositoryMockDeleteByChatIDExpectation{}
	}

	if mmDeleteByChatID.defaultExpectation.paramPtrs != nil {
		mmDeleteByChatID.mock.t.Fatalf("UserRepositoryMock.DeleteByChatID mock is already set by ExpectParams functions")
	}

	mmDeleteByChatID.defaultExpectation.params = &UserRepositoryMockDeleteByChatIDParams{ctx, chatID}
	mmDeleteByChatID.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmDeleteByChatID.expectations {
		if minimock.Equal(e.params, mmDeleteByChatID.defaultExpectation.params) {
			mmDeleteByChatID.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteByChatID.defaultExpectation.params)
		}
	}

	return mmDeleteByChatID
}

// ExpectCtxParam1 sets up expected param ctx for UserRepository.DeleteByChatID
func (mmDeleteByChatID *mUserRepositoryMockDeleteByChatID) ExpectCtxParam1(ctx context.Context) *mUserRepositoryMockDeleteByChatID {
	if mmDeleteByChatID.mock.funcDeleteByChatID != nil {
		mmDeleteByChatID.mock.t.Fatalf("UserRepositoryMock.DeleteByChatID mock is already set by Set")
	}

	if mmDeleteByChatID.defaultExpectation == nil {
		mmDeleteByChatID.defaultExpectation = &UserRepositoryMockDeleteByChatIDExpectation{}
	}

	if mmDeleteByChatID.defaultExpectation.params != nil {
		mmDeleteByChatID.mock.t.Fatalf("UserRepositoryMock.DeleteByChatID mock is already set by Expect")
	}

	if mmDeleteByChatID.defaultExpectation.paramPtrs == nil {
		mmDeleteByChatID.defaultExpectation.paramPtrs = &UserRepositoryMockDeleteByChatIDParamPtrs{}
	}
	mmDeleteByChatID.defaultExpectation.paramPtrs.ctx = &ctx
	mmDeleteByChatID.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmDeleteByChatID
}

// ExpectChatIDParam2 sets up expected param chatID for UserRepository.DeleteByChatID
func (mmDeleteByChatID *mUserRepositoryMockDeleteByChatID) ExpectChatIDParam2(chatID int64) *mUserRepositoryMockDeleteByChatID {
	if mmDeleteByChatID.mock.funcDeleteByChatID != nil {
		mmDeleteByChatID.mock.t.Fatalf("UserRepositoryMock.DeleteByChatID mock is already set by Set")
	}

	if mmDeleteByChatID.defaultExpectation == nil {
		mmDeleteByChatID.defaultExpectation = &UserRepositoryMockDeleteByChatIDExpectation{}
	}

	if mmDeleteByChatID.defaultExpectation.params != nil {
		mmDeleteByChatID.mock.t.Fatalf("UserRepositoryMock.DeleteByChatID mock is already set by Expect")
	}

	if mmDeleteByChatID.defaultExpectation.paramPtrs == nil {
		mmDeleteByChatID.defaultExpectation.paramPtrs = &UserRepositoryMockDeleteByChatIDParamPtrs{}
	}
	mmDeleteByChatID.defaultExpectation.paramPtrs.chatID = &chatID
	mmDeleteByChatID.defaultExpectation.expectationOrigins.originChatID = minimock.CallerInfo(1)

	return mmDeleteByChatID
}

// Inspect accepts an inspector function that has same arguments as the UserRepository.DeleteByChatID
func (mmDeleteByChatID *mUserRepositoryMockDeleteByChatID) Inspect(f func(ctx context.Context, chatID int64)) *mUserRepositoryMockDeleteByChatID {
	if mmDeleteByChatID.mock.inspectFuncDeleteByChatID != nil {
		mmDeleteByChatID.mock.t.Fatalf("Inspect function is already set for UserRepositoryMock.DeleteByChatID")
	}

	mmDeleteByChatID.mock.inspectFuncDeleteByChatID = f

	return mmDeleteByChatID
}

// Return sets up results that will be returned by UserRepository.DeleteByChatID
func (mmDeleteByChatID *mUserRepositoryMockDeleteByChatID) Return(err error) *UserRepositoryMock {
	if mmDeleteByChatID.mock.funcDeleteByChatID != nil {
		mmDeleteByChatID.mock.t.Fatalf("UserRepositoryMock.DeleteByChatID mock is already set by Set")
	}

	if mmDeleteByChatID.defaultExpectation == nil {
		mmDeleteByChatID.defaultExpectation = &UserRepositoryMockDeleteByChatIDExpectation{mock: mmDeleteByChatID.mock}
	}
	mmDeleteByChatID.defaultExpectation.results = &UserRepositoryMockDeleteByChatIDResults{err}
	mmDeleteByChatID.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmDeleteByChatID.mock
}

// Set uses given function f to mock the UserRepository.DeleteByChatID method
func (mmDeleteByChatID *mUserRepositoryMockDeleteByChatID) Set(f func(ctx context.Context, chatID int64) (err error)) *UserRepositoryMock {
	if mmDeleteByChatID.defaultExpectation != nil {
		mmDeleteByChatID.mock.t.Fatalf("Default expectation is already set for the UserRepository.DeleteByChatID method")
	}

	if len(mmDeleteByChatID.expectations) > 0 {
		mmDeleteByChatID.mock.t.Fatalf("Some expectations are already set for the UserRepository.DeleteByChatID method")
	}

	mmDeleteByChatID.mock.funcDeleteByChatID = f
	mmDeleteByChatID.mock.funcDeleteByChatIDOrigin = minimock.CallerInfo(1)
	return mmDeleteByChatID.mock
}

// When sets expectation for the UserRepository.DeleteByChatID which will trigger the result defined by the following
// Then helper
func (mmDeleteByChatID *mUserRepositoryMockDeleteByChatID) When(ctx context.Context, chatID int64) *UserRepositoryMockDeleteByChatIDExpectation {
	if mmDeleteByChatID.mock.funcDeleteByChatID != nil {
		mmDeleteByChatID.mock.t.Fatalf("UserRepositoryMock.DeleteByChatID mock is already set by Set")
	}

	expectation := &UserRepositoryMockDeleteByChatIDExpectation{
		mock:               mmDeleteByChatID.mock,
		params:             &UserRepositoryMockDeleteByChatIDParams{ctx, chatID},
		expectationOrigins: UserRepositoryMockDeleteByChatIDExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmDeleteByChatID.expectations = append(mmDeleteByChatID.expectations, expectation)
	return expectation
}

// Then sets up UserRepository.DeleteByChatID return parameters for the expectation previously defined by the When method
func (e *UserRepositoryMockDeleteByChatIDExpectation) Then(err error) *UserRepositoryMock {
	e.results = &UserRepositoryMockDeleteByChatIDResults{err}
	return e.mock
}

// Times sets number of times UserRepository.DeleteByChatID should be invoked
func (mmDeleteByChatID *mUserRepositoryMockDeleteByChatID) Times(n uint64) *mUserRepositoryMockDeleteByChatID {
	if n == 0 {
		mmDeleteByChatID.mock.t.Fatalf("Times of UserRepositoryMock.DeleteByChatID mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDeleteByChatID.expectedInvocations, n)
	mmDeleteByChatID.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmDeleteByChatID
}

func (mmDeleteByChatID *mUserRepositoryMockDeleteByChatID) invocationsDone() bool {
	if len(mmDeleteByChatID.expectations) == 0 && mmDeleteByChatID.defaultExpectation == nil && mmDeleteByChatID.mock.funcDeleteByChatID == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDeleteByChatID.mock.afterDeleteByChatIDCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDeleteByChatID.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// DeleteByChatID implements mm_repository.UserRepository
func (mmDeleteByChatID *UserRepositoryMock) DeleteByChatID(ctx context.Context, chatID int64) (err error) {
	mm_atomic.AddUint64(&mmDeleteByChatID.beforeDeleteByChatIDCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteByChatID.afterDeleteByChatIDCounter, 1)

	mmDeleteByChatID.t.Helper()

	if mmDeleteByChatID.inspectFuncDeleteByChatID != nil {
		mmDeleteByChatID.inspectFuncDeleteByChatID(ctx, chatID)
	}

	mm_params := UserRepositoryMockDeleteByChatIDParams{ctx, chatID}

	// Record call args
	mmDeleteByChatID.DeleteByChatIDMock.mutex.Lock()
	mmDeleteByChatID.DeleteByChatIDMock.callArgs = append(mmDeleteByChatID.DeleteByChatIDMock.callArgs, &mm_params)
	mmDeleteByChatID.DeleteByChatIDMock.mutex.Unlock()

	for _, e := range mmDeleteByChatID.DeleteByChatIDMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDeleteByChatID.DeleteByChatIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteByChatID.DeleteByChatIDMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteByChatID.DeleteByChatIDMock.defaultExpectation.params
		mm_want_ptrs := mmDeleteByChatID.DeleteByChatIDMock.defaultExpectation.paramPtrs

		mm_got := UserRepositoryMockDeleteByChatIDParams{ctx, chatID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDeleteByChatID.t.Errorf("UserRepositoryMock.DeleteByChatID got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteByChatID.DeleteByChatIDMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.chatID != nil && !minimock.Equal(*mm_want_ptrs.chatID, mm_got.chatID) {
				mmDeleteByChatID.t.Errorf("UserRepositoryMock.DeleteByChatID got unexpected parameter chatID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteByChatID.DeleteByChatIDMock.defaultExpectation.expectationOrigins.originChatID, *mm_want_ptrs.chatID, mm_got.chatID, minimock.Diff(*mm_want_ptrs.chatID, mm_got.chatID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteByChatID.t.Errorf("UserRepositoryMock.DeleteByChatID got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmDeleteByChatID.DeleteByChatIDMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteByChatID.DeleteByChatIDMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteByChatID.t.Fatal("No results are set for the UserRepositoryMock.DeleteByChatID")
		}
		return (*mm_results).err
	}
	if mmDeleteByChatID.funcDeleteByChatID != nil {
		return mmDeleteByChatID.funcDeleteByChatID(ctx, chatID)
	}
	mmDeleteByChatID.t.Fatalf("Unexpected call to UserRepositoryMock.DeleteByChatID. %v %v", ctx, chatID)
	return
}

// DeleteByChatIDAfterCounter returns a count of finished UserRepositoryMock.DeleteByChatID invocations
func (mmDeleteByChatID *UserRepositoryMock) DeleteByChatIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteByChatID.afterDeleteByChatIDCounter)
}

// DeleteByChatIDBeforeCounter returns a count of UserRepositoryMock.DeleteByChatID invocations
func (mmDeleteByChatID *UserRepositoryMock) DeleteByChatIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteByChatID.beforeDeleteByChatIDCounter)
}

// Calls returns a list of arguments used in each call to UserRepositoryMock.DeleteByChatID.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteByChatID *mUserRepositoryMockDeleteByChatID) Calls() []*UserRepositoryMockDeleteByChatIDParams {
	mmDeleteByChatID.mutex.RLock()

	argCopy := make([]*UserRepositoryMockDeleteByChatIDParams, len(mmDeleteByChatID.callArgs))
	copy(argCopy, mmDeleteByChatID.callArgs)

	mmDeleteByChatID.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteByChatIDDone returns true if the count of the DeleteByChatID invocations corresponds
// the number of defined expectations
func (m *UserRepositoryMock) MinimockDeleteByChatIDDone() bool {
	if m.DeleteByChatIDMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteByChatIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteByChatIDMock.invocationsDone()
}

// MinimockDeleteByChatIDInspect logs each unmet expectation
func (m *UserRepositoryMock) MinimockDeleteByChatIDInspect() {
	for _, e := range m.DeleteByChatIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserRepositoryMock.DeleteByChatID at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterDeleteByChatIDCounter := mm_atomic.LoadUint64(&m.afterDeleteByChatIDCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteByChatIDMock.defaultExpectation != nil && afterDeleteByChatIDCounter < 1 {
		if m.DeleteByChatIDMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to UserRepositoryMock.DeleteByChatID at\n%s", m.DeleteByChatIDMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to UserRepositoryMock.DeleteByChatID at\n%s with params: %#v", m.DeleteByChatIDMock.defaultExpectation.expectationOrigins.origin, *m.DeleteByChatIDMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteByChatID != nil && afterDeleteByChatIDCounter < 1 {
		m.t.Errorf("Expected call to UserRepositoryMock.DeleteByChatID at\n%s", m.funcDeleteByChatIDOrigin)
	}

	if !m.DeleteByChatIDMock.invocationsDone() && afterDeleteByChatIDCounter > 0 {
		m.t.Errorf("Expected %d calls to UserRepositoryMock.DeleteByChatID at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteByChatIDMock.expectedInvocations), m.DeleteByChatIDMock.expectedInvocationsOrigin, afterDeleteByChatIDCounter)
	}
}

type mUserRepositoryMockSaveByChatID struct {
	optional           bool
	mock               *UserRepositoryMock
	defaultExpectation *UserRepositoryMockSaveByChatIDExpectation
	expectations       []*UserRepositoryMockSaveByChatIDExpectation

	callArgs []*UserRepositoryMockSaveByChatIDParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// UserRepositoryMockSaveByChatIDExpectation specifies expectation struct of the UserRepository.SaveByChatID
type UserRepositoryMockSaveByChatIDExpectation struct {
	mock               *UserRepositoryMock
	params             *UserRepositoryMockSaveByChatIDParams
	paramPtrs          *UserRepositoryMockSaveByChatIDParamPtrs
	expectationOrigins UserRepositoryMockSaveByChatIDExpectationOrigins
	results            *UserRepositoryMockSaveByChatIDResults
	returnOrigin       string
	Counter            uint64
}

// UserRepositoryMockSaveByChatIDParams contains parameters of the UserRepository.SaveByChatID
type UserRepositoryMockSaveByChatIDParams struct {
	ctx       context.Context
	chatID    int64
	usernames []string
}

// UserRepositoryMockSaveByChatIDParamPtrs contains pointers to parameters of the UserRepository.SaveByChatID
type UserRepositoryMockSaveByChatIDParamPtrs struct {
	ctx       *context.Context
	chatID    *int64
	usernames *[]string
}

// UserRepositoryMockSaveByChatIDResults contains results of the UserRepository.SaveByChatID
type UserRepositoryMockSaveByChatIDResults struct {
	err error
}

// UserRepositoryMockSaveByChatIDOrigins contains origins of expectations of the UserRepository.SaveByChatID
type UserRepositoryMockSaveByChatIDExpectationOrigins struct {
	origin          string
	originCtx       string
	originChatID    string
	originUsernames string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSaveByChatID *mUserRepositoryMockSaveByChatID) Optional() *mUserRepositoryMockSaveByChatID {
	mmSaveByChatID.optional = true
	return mmSaveByChatID
}

// Expect sets up expected params for UserRepository.SaveByChatID
func (mmSaveByChatID *mUserRepositoryMockSaveByChatID) Expect(ctx context.Context, chatID int64, usernames []string) *mUserRepositoryMockSaveByChatID {
	if mmSaveByChatID.mock.funcSaveByChatID != nil {
		mmSaveByChatID.mock.t.Fatalf("UserRepositoryMock.SaveByChatID mock is already set by Set")
	}

	if mmSaveByChatID.defaultExpectation == nil {
		mmSaveByChatID.defaultExpectation = &UserRepositoryMockSaveByChatIDExpectation{}
	}

	if mmSaveByChatID.defaultExpectation.paramPtrs != nil {
		mmSaveByChatID.mock.t.Fatalf("UserRepositoryMock.SaveByChatID mock is already set by ExpectParams functions")
	}

	mmSaveByChatID.defaultExpectation.params = &UserRepositoryMockSaveByChatIDParams{ctx, chatID, usernames}
	mmSaveByChatID.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmSaveByChatID.expectations {
		if minimock.Equal(e.params, mmSaveByChatID.defaultExpectation.params) {
			mmSaveByChatID.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSaveByChatID.defaultExpectation.params)
		}
	}

	return mmSaveByChatID
}

// ExpectCtxParam1 sets up expected param ctx for UserRepository.SaveByChatID
func (mmSaveByChatID *mUserRepositoryMockSaveByChatID) ExpectCtxParam1(ctx context.Context) *mUserRepositoryMockSaveByChatID {
	if mmSaveByChatID.mock.funcSaveByChatID != nil {
		mmSaveByChatID.mock.t.Fatalf("UserRepositoryMock.SaveByChatID mock is already set by Set")
	}

	if mmSaveByChatID.defaultExpectation == nil {
		mmSaveByChatID.defaultExpectation = &UserRepositoryMockSaveByChatIDExpectation{}
	}

	if mmSaveByChatID.defaultExpectation.params != nil {
		mmSaveByChatID.mock.t.Fatalf("UserRepositoryMock.SaveByChatID mock is already set by Expect")
	}

	if mmSaveByChatID.defaultExpectation.paramPtrs == nil {
		mmSaveByChatID.defaultExpectation.paramPtrs = &UserRepositoryMockSaveByChatIDParamPtrs{}
	}
	mmSaveByChatID.defaultExpectation.paramPtrs.ctx = &ctx
	mmSaveByChatID.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmSaveByChatID
}

// ExpectChatIDParam2 sets up expected param chatID for UserRepository.SaveByChatID
func (mmSaveByChatID *mUserRepositoryMockSaveByChatID) ExpectChatIDParam2(chatID int64) *mUserRepositoryMockSaveByChatID {
	if mmSaveByChatID.mock.funcSaveByChatID != nil {
		mmSaveByChatID.mock.t.Fatalf("UserRepositoryMock.SaveByChatID mock is already set by Set")
	}

	if mmSaveByChatID.defaultExpectation == nil {
		mmSaveByChatID.defaultExpectation = &UserRepositoryMockSaveByChatIDExpectation{}
	}

	if mmSaveByChatID.defaultExpectation.params != nil {
		mmSaveByChatID.mock.t.Fatalf("UserRepositoryMock.SaveByChatID mock is already set by Expect")
	}

	if mmSaveByChatID.defaultExpectation.paramPtrs == nil {
		mmSaveByChatID.defaultExpectation.paramPtrs = &UserRepositoryMockSaveByChatIDParamPtrs{}
	}
	mmSaveByChatID.defaultExpectation.paramPtrs.chatID = &chatID
	mmSaveByChatID.defaultExpectation.expectationOrigins.originChatID = minimock.CallerInfo(1)

	return mmSaveByChatID
}

// ExpectUsernamesParam3 sets up expected param usernames for UserRepository.SaveByChatID
func (mmSaveByChatID *mUserRepositoryMockSaveByChatID) ExpectUsernamesParam3(usernames []string) *mUserRepositoryMockSaveByChatID {
	if mmSaveByChatID.mock.funcSaveByChatID != nil {
		mmSaveByChatID.mock.t.Fatalf("UserRepositoryMock.SaveByChatID mock is already set by Set")
	}

	if mmSaveByChatID.defaultExpectation == nil {
		mmSaveByChatID.defaultExpectation = &UserRepositoryMockSaveByChatIDExpectation{}
	}

	if mmSaveByChatID.defaultExpectation.params != nil {
		mmSaveByChatID.mock.t.Fatalf("UserRepositoryMock.SaveByChatID mock is already set by Expect")
	}

	if mmSaveByChatID.defaultExpectation.paramPtrs == nil {
		mmSaveByChatID.defaultExpectation.paramPtrs = &UserRepositoryMockSaveByChatIDParamPtrs{}
	}
	mmSaveByChatID.defaultExpectation.paramPtrs.usernames = &usernames
	mmSaveByChatID.defaultExpectation.expectationOrigins.originUsernames = minimock.CallerInfo(1)

	return mmSaveByChatID
}

// Inspect accepts an inspector function that has same arguments as the UserRepository.SaveByChatID
func (mmSaveByChatID *mUserRepositoryMockSaveByChatID) Inspect(f func(ctx context.Context, chatID int64, usernames []string)) *mUserRepositoryMockSaveByChatID {
	if mmSaveByChatID.mock.inspectFuncSaveByChatID != nil {
		mmSaveByChatID.mock.t.Fatalf("Inspect function is already set for UserRepositoryMock.SaveByChatID")
	}

	mmSaveByChatID.mock.inspectFuncSaveByChatID = f

	return mmSaveByChatID
}

// Return sets up results that will be returned by UserRepository.SaveByChatID
func (mmSaveByChatID *mUserRepositoryMockSaveByChatID) Return(err error) *UserRepositoryMock {
	if mmSaveByChatID.mock.funcSaveByChatID != nil {
		mmSaveByChatID.mock.t.Fatalf("UserRepositoryMock.SaveByChatID mock is already set by Set")
	}

	if mmSaveByChatID.defaultExpectation == nil {
		mmSaveByChatID.defaultExpectation = &UserRepositoryMockSaveByChatIDExpectation{mock: mmSaveByChatID.mock}
	}
	mmSaveByChatID.defaultExpectation.results = &UserRepositoryMockSaveByChatIDResults{err}
	mmSaveByChatID.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmSaveByChatID.mock
}

// Set uses given function f to mock the UserRepository.SaveByChatID method
func (mmSaveByChatID *mUserRepositoryMockSaveByChatID) Set(f func(ctx context.Context, chatID int64, usernames []string) (err error)) *UserRepositoryMock {
	if mmSaveByChatID.defaultExpectation != nil {
		mmSaveByChatID.mock.t.Fatalf("Default expectation is already set for the UserRepository.SaveByChatID method")
	}

	if len(mmSaveByChatID.expectations) > 0 {
		mmSaveByChatID.mock.t.Fatalf("Some expectations are already set for the UserRepository.SaveByChatID method")
	}

	mmSaveByChatID.mock.funcSaveByChatID = f
	mmSaveByChatID.mock.funcSaveByChatIDOrigin = minimock.CallerInfo(1)
	return mmSaveByChatID.mock
}

// When sets expectation for the UserRepository.SaveByChatID which will trigger the result defined by the following
// Then helper
func (mmSaveByChatID *mUserRepositoryMockSaveByChatID) When(ctx context.Context, chatID int64, usernames []string) *UserRepositoryMockSaveByChatIDExpectation {
	if mmSaveByChatID.mock.funcSaveByChatID != nil {
		mmSaveByChatID.mock.t.Fatalf("UserRepositoryMock.SaveByChatID mock is already set by Set")
	}

	expectation := &UserRepositoryMockSaveByChatIDExpectation{
		mock:               mmSaveByChatID.mock,
		params:             &UserRepositoryMockSaveByChatIDParams{ctx, chatID, usernames},
		expectationOrigins: UserRepositoryMockSaveByChatIDExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmSaveByChatID.expectations = append(mmSaveByChatID.expectations, expectation)
	return expectation
}

// Then sets up UserRepository.SaveByChatID return parameters for the expectation previously defined by the When method
func (e *UserRepositoryMockSaveByChatIDExpectation) Then(err error) *UserRepositoryMock {
	e.results = &UserRepositoryMockSaveByChatIDResults{err}
	return e.mock
}

// Times sets number of times UserRepository.SaveByChatID should be invoked
func (mmSaveByChatID *mUserRepositoryMockSaveByChatID) Times(n uint64) *mUserRepositoryMockSaveByChatID {
	if n == 0 {
		mmSaveByChatID.mock.t.Fatalf("Times of UserRepositoryMock.SaveByChatID mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSaveByChatID.expectedInvocations, n)
	mmSaveByChatID.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmSaveByChatID
}

func (mmSaveByChatID *mUserRepositoryMockSaveByChatID) invocationsDone() bool {
	if len(mmSaveByChatID.expectations) == 0 && mmSaveByChatID.defaultExpectation == nil && mmSaveByChatID.mock.funcSaveByChatID == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSaveByChatID.mock.afterSaveByChatIDCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSaveByChatID.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// SaveByChatID implements mm_repository.UserRepository
func (mmSaveByChatID *UserRepositoryMock) SaveByChatID(ctx context.Context, chatID int64, usernames []string) (err error) {
	mm_atomic.AddUint64(&mmSaveByChatID.beforeSaveByChatIDCounter, 1)
	defer mm_atomic.AddUint64(&mmSaveByChatID.afterSaveByChatIDCounter, 1)

	mmSaveByChatID.t.Helper()

	if mmSaveByChatID.inspectFuncSaveByChatID != nil {
		mmSaveByChatID.inspectFuncSaveByChatID(ctx, chatID, usernames)
	}

	mm_params := UserRepositoryMockSaveByChatIDParams{ctx, chatID, usernames}

	// Record call args
	mmSaveByChatID.SaveByChatIDMock.mutex.Lock()
	mmSaveByChatID.SaveByChatIDMock.callArgs = append(mmSaveByChatID.SaveByChatIDMock.callArgs, &mm_params)
	mmSaveByChatID.SaveByChatIDMock.mutex.Unlock()

	for _, e := range mmSaveByChatID.SaveByChatIDMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSaveByChatID.SaveByChatIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSaveByChatID.SaveByChatIDMock.defaultExpectation.Counter, 1)
		mm_want := mmSaveByChatID.SaveByChatIDMock.defaultExpectation.params
		mm_want_ptrs := mmSaveByChatID.SaveByChatIDMock.defaultExpectation.paramPtrs

		mm_got := UserRepositoryMockSaveByChatIDParams{ctx, chatID, usernames}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmSaveByChatID.t.Errorf("UserRepositoryMock.SaveByChatID got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSaveByChatID.SaveByChatIDMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.chatID != nil && !minimock.Equal(*mm_want_ptrs.chatID, mm_got.chatID) {
				mmSaveByChatID.t.Errorf("UserRepositoryMock.SaveByChatID got unexpected parameter chatID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSaveByChatID.SaveByChatIDMock.defaultExpectation.expectationOrigins.originChatID, *mm_want_ptrs.chatID, mm_got.chatID, minimock.Diff(*mm_want_ptrs.chatID, mm_got.chatID))
			}

			if mm_want_ptrs.usernames != nil && !minimock.Equal(*mm_want_ptrs.usernames, mm_got.usernames) {
				mmSaveByChatID.t.Errorf("UserRepositoryMock.SaveByChatID got unexpected parameter usernames, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSaveByChatID.SaveByChatIDMock.defaultExpectation.expectationOrigins.originUsernames, *mm_want_ptrs.usernames, mm_got.usernames, minimock.Diff(*mm_want_ptrs.usernames, mm_got.usernames))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSaveByChatID.t.Errorf("UserRepositoryMock.SaveByChatID got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmSaveByChatID.SaveByChatIDMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSaveByChatID.SaveByChatIDMock.defaultExpectation.results
		if mm_results == nil {
			mmSaveByChatID.t.Fatal("No results are set for the UserRepositoryMock.SaveByChatID")
		}
		return (*mm_results).err
	}
	if mmSaveByChatID.funcSaveByChatID != nil {
		return mmSaveByChatID.funcSaveByChatID(ctx, chatID, usernames)
	}
	mmSaveByChatID.t.Fatalf("Unexpected call to UserRepositoryMock.SaveByChatID. %v %v %v", ctx, chatID, usernames)
	return
}

// SaveByChatIDAfterCounter returns a count of finished UserRepositoryMock.SaveByChatID invocations
func (mmSaveByChatID *UserRepositoryMock) SaveByChatIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSaveByChatID.afterSaveByChatIDCounter)
}

// SaveByChatIDBeforeCounter returns a count of UserRepositoryMock.SaveByChatID invocations
func (mmSaveByChatID *UserRepositoryMock) SaveByChatIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSaveByChatID.beforeSaveByChatIDCounter)
}

// Calls returns a list of arguments used in each call to UserRepositoryMock.SaveByChatID.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSaveByChatID *mUserRepositoryMockSaveByChatID) Calls() []*UserRepositoryMockSaveByChatIDParams {
	mmSaveByChatID.mutex.RLock()

	argCopy := make([]*UserRepositoryMockSaveByChatIDParams, len(mmSaveByChatID.callArgs))
	copy(argCopy, mmSaveByChatID.callArgs)

	mmSaveByChatID.mutex.RUnlock()

	return argCopy
}

// MinimockSaveByChatIDDone returns true if the count of the SaveByChatID invocations corresponds
// the number of defined expectations
func (m *UserRepositoryMock) MinimockSaveByChatIDDone() bool {
	if m.SaveByChatIDMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SaveByChatIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SaveByChatIDMock.invocationsDone()
}

// MinimockSaveByChatIDInspect logs each unmet expectation
func (m *UserRepositoryMock) MinimockSaveByChatIDInspect() {
	for _, e := range m.SaveByChatIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserRepositoryMock.SaveByChatID at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterSaveByChatIDCounter := mm_atomic.LoadUint64(&m.afterSaveByChatIDCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SaveByChatIDMock.defaultExpectation != nil && afterSaveByChatIDCounter < 1 {
		if m.SaveByChatIDMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to UserRepositoryMock.SaveByChatID at\n%s", m.SaveByChatIDMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to UserRepositoryMock.SaveByChatID at\n%s with params: %#v", m.SaveByChatIDMock.defaultExpectation.expectationOrigins.origin, *m.SaveByChatIDMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSaveByChatID != nil && afterSaveByChatIDCounter < 1 {
		m.t.Errorf("Expected call to UserRepositoryMock.SaveByChatID at\n%s", m.funcSaveByChatIDOrigin)
	}

	if !m.SaveByChatIDMock.invocationsDone() && afterSaveByChatIDCounter > 0 {
		m.t.Errorf("Expected %d calls to UserRepositoryMock.SaveByChatID at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.SaveByChatIDMock.expectedInvocations), m.SaveByChatIDMock.expectedInvocationsOrigin, afterSaveByChatIDCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *UserRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockDeleteByChatIDInspect()

			m.MinimockSaveByChatIDInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *UserRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *UserRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockDeleteByChatIDDone() &&
		m.MinimockSaveByChatIDDone()
}
